package services;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.fasterxml.jackson.core.exc.StreamWriteException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.ObjectMapper;

import entities.Ticket;
import entities.Train;
import entities.User;
import utils.UserServiceUtil;

public class UserBookingService {
    private User user;
    private static final String USER_PATH = "D:\\Project\\Personal\\ticketbooking\\src\\main\\java\\localdb\\users.json";
    private ObjectMapper objectMapper = new ObjectMapper();
    private List<User> userList;
    private TrainService trainService=new TrainService();

    public UserBookingService(User user) throws IOException {
        this.user = user;
        loadUsers();
    }
    public UserBookingService() throws IOException {
        loadUsers();
    }
    // Method to load users from JSON
    private void loadUsers() throws IOException {
        File users = new File(USER_PATH);
        if (users.exists()) {
            userList = objectMapper.readValue(users, new TypeReference<List<User>>() {});
        } else {
            throw new IOException("User data file not found: " + USER_PATH);
        }
    }

	public Boolean loginUser() {
		return  userList.stream().filter(u -> u.getName().equals(user.getName())
				&& UserServiceUtil.checkPassword(user.getPassword(), u.getHashPassword())).findFirst().isPresent();
	}
  public Boolean signUp(User user) {
	  try {
		  userList.add(user);
		  saveuserListToFile(); 
		  return Boolean.TRUE;
	  }catch (Exception e) {
		  System.out.println("error while signing please try after sometime..");
		  return false;
	}
  }

private void saveuserListToFile() throws StreamWriteException, DatabindException, IOException {
	File user=new File(USER_PATH);
	objectMapper.writeValue(user, userList);
	
}
public void fetchTickets() {
	if(user==null) {
		System.out.println("try log in first...");
	}else {
		user.printTickets();
	}
	
}
public boolean cancelTickets(String ticketId) throws StreamWriteException, DatabindException, IOException {
	 List<Ticket> listOfTickets = userList.stream().flatMap(t->t.getTicketBooked().stream()).collect(Collectors.toList());
	 boolean removeIf = listOfTickets.removeIf(t->ticketId.equals(t.getTicketId()));
	 saveuserListToFile();
	 return removeIf;
}
public List<Train> getTrains(String source, String dest) {
	return trainService.searchTrains(source,dest);
}
public List<List<Integer>> fetchSeats(Train train){
    return train.getSeats();
}
public Boolean bookTrainSeat(Train train, int row, int seat) throws IOException {
    TrainService trainService = new TrainService();
	List<List<Integer>> seats = train.getSeats();
	if (row >= 0 && row < seats.size() && seat >= 0 && seat < seats.get(row).size()) {
	    if (seats.get(row).get(seat) == 0) {
	        seats.get(row).set(seat, 1);
	        train.setSeats(seats);
	        trainService.addTrain(train);
	        return true; // Booking successful
	    } else {
	        return false; // Seat is already booked
	    }
	} else {
	    return false; // Invalid row or seat index
	}
}
}
