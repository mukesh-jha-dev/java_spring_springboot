package services;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.fasterxml.jackson.core.exc.StreamWriteException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.ObjectMapper;

import entities.Ticket;
import entities.Train;
import entities.User;
import utils.UserServiceUtil;

public class UserBookingService {
    private User user;
    private static final String USER_PATH = "D:\\Project\\Personal\\ticketbooking\\src\\main\\java\\localdb\\users.json";
    private ObjectMapper objectMapper = new ObjectMapper();
    private List<User> userList;
    private TrainService trainService=new TrainService();

    public UserBookingService(User user) throws IOException {
        this.user = user;
        loadUsers();
    }
    public UserBookingService() throws IOException {
        loadUsers();
    }
    // Method to load users from JSON
    private void loadUsers() throws IOException {
        File users = new File(USER_PATH);
        if (users.exists()) {
            userList = objectMapper.readValue(users, new TypeReference<List<User>>() {});
        } else {
            throw new IOException("User data file not found: " + USER_PATH);
        }
    }

	public Boolean loginUser() {
		return  userList.stream().filter(u -> u.getName().equals(user.getName())
				&& UserServiceUtil.checkPassword(user.getPassword(), u.getHashPassword())).findFirst().isPresent();
	}
  public Boolean signUp(User user) {
	  try {
		  userList.add(user);
		  saveuserListToFile(); 
		  return Boolean.TRUE;
	  }catch (Exception e) {
		  return false;
	}
  }

private void saveuserListToFile() throws StreamWriteException, DatabindException, IOException {
	File user=new File(USER_PATH);
	objectMapper.writeValue(user, userList);
	
}
public Boolean cancelBooking(String ticketId){
    
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the ticket id to cancel");
        ticketId = s.next();

        if (ticketId == null || ticketId.isEmpty()) {
            System.out.println("Ticket ID cannot be null or empty.");
            return Boolean.FALSE;
        }

        String finalTicketId1 = ticketId;  //Because strings are immutable
        boolean removed = user.getTicketsBooked().removeIf(ticket -> ticket.getTicketId().equals(finalTicketId1));

        String finalTicketId = ticketId;
        user.getTicketsBooked().removeIf(Ticket -> Ticket.getTicketId().equals(finalTicketId));
        if (removed) {
            System.out.println("Ticket with ID " + ticketId + " has been canceled.");
            return Boolean.TRUE;
        }else{
        System.out.println("No ticket found with ID " + ticketId);
            return Boolean.FALSE;
        }
    }
        

    public List<Train> getTrains(String source, String destination){
        try{
            TrainService trainService = new TrainService();
            return trainService.searchTrains(source, destination);
        }catch(IOException ex){
            return new ArrayList<>();
        }
    }

    public List<List<Integer>> fetchSeats(Train train){
            return train.getSeats();
    }

    public Boolean bookTrainSeat(Train train, int row, int seat) {
        try{
            TrainService trainService = new TrainService();
            List<List<Integer>> seats = train.getSeats();
            if (row >= 0 && row < seats.size() && seat >= 0 && seat < seats.get(row).size()) {
                if (seats.get(row).get(seat) == 0) {
                    seats.get(row).set(seat, 1);
                    train.setSeats(seats);
                    trainService.addTrain(train);
                    return true; // Booking successful
                } else {
                    return false; // Seat is already booked
                }
            } else {
                return false; // Invalid row or seat index
            }
        }catch (IOException ex){
            return Boolean.FALSE;
        }
    }

}
